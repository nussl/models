# Output folder is defined at runtime
# ===================================
output_folder._output_folder = None
model_path.model_suffix = 'checkpoints/best.model.pth'

# Sweep parameters
# ================
sweep.parameters = {
   "add_autoclip_gradient_handler.clip_percentile": [1, 10, 25, 50, 90, 100]
}

# Building up DPCL network
# ========================
nussl.ml.networks.builders.build_recurrent_dpcl.num_features = 129
nussl.ml.networks.builders.build_recurrent_dpcl.hidden_size = 600
nussl.ml.networks.builders.build_recurrent_dpcl.num_layers = 4
nussl.ml.networks.builders.build_recurrent_dpcl.bidirectional = True
nussl.ml.networks.builders.build_recurrent_dpcl.dropout = 0.3
nussl.ml.networks.builders.build_recurrent_dpcl.embedding_size = 20
nussl.ml.networks.builders.build_recurrent_dpcl.embedding_activation = \
    ['sigmoid', 'unit_norm']

# Build model, optimizer, scheduler
# =================================
torch.optim.Adam.lr = .001
torch.optim.lr_scheduler.ReduceLROnPlateau.factor = 0.5
torch.optim.lr_scheduler.ReduceLROnPlateau.patience = 5

build_model_optimizer_scheduler.optimizer_class = \
    @torch.optim.Adam
build_model_optimizer_scheduler.scheduler_class = \
    @torch.optim.lr_scheduler.ReduceLROnPlateau
build_model_optimizer_scheduler.model_config = \
    @nussl.ml.networks.builders.build_recurrent_dpcl()

# Building up train arguments
# ===========================
train.output_folder = @output_folder()
train.loss_dictionary = {
    'WhitenedKMeansLoss': {'weight': 1.0}
}
train.device = "cuda"
train.num_epochs = 100
train.num_data_workers = 1
train.batch_size = 25
train.seed = 0

# Add handlers and set arguments
# ==============================
add_train_handlers.handler_names = [
    "add_lr_scheduler_handler",
    "add_autoclip_gradient_handler"
]


# Building up evaluation arguments
# ================================
evaluate.output_folder = @output_folder()

BSSEvalScale.compute_permutation = True
BSSEvalScale.source_labels = ['s1', 's2']

nussl.separation.deep.DeepClustering.model_path = @model_path()
nussl.separation.deep.DeepClustering.num_sources = 2
evaluate.separation_algorithm = @nussl.separation.deep.DeepClustering
evaluate.block_on_gpu = True
evaluate.eval_class = @nussl.evaluation.BSSEvalScale
evaluate.num_workers = 1
evaluate.output_folder = @output_folder()
evaluate.seed = 0

# Building up analysis arguments
# ==============================
analyze.output_folder = @output_folder()
