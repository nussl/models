# Output folder is defined at runtime
# ===================================
output_folder._output_folder = None
model_path.model_suffix = 'checkpoints/best.model.pth'

# Things we want to sweep over
# Give these to instantiate to
# create multiple experiments
# ============================
sweep.parameters = {
    'add_clip_gradient_handler.clip_value': [1e-2]
}

# Building up OpenUnmix network
# =============================
nussl.ml.networks.builders.build_open_unmix_like.num_features = 129
nussl.ml.networks.builders.build_open_unmix_like.hidden_size = 512
nussl.ml.networks.builders.build_open_unmix_like.num_layers = 3
nussl.ml.networks.builders.build_open_unmix_like.bidirectional = True
nussl.ml.networks.builders.build_open_unmix_like.dropout = 0.4
nussl.ml.networks.builders.build_open_unmix_like.num_sources = 2
nussl.ml.networks.builders.build_open_unmix_like.num_audio_channels = 1
nussl.ml.networks.builders.build_open_unmix_like.add_embedding = True
nussl.ml.networks.builders.build_open_unmix_like.embedding_size = 20
nussl.ml.networks.builders.build_open_unmix_like.embedding_activation = \
    ['sigmoid', 'unit_norm']

# Build model, optimizer, scheduler
# =================================
torch.optim.Adam.lr = .001
torch.optim.lr_scheduler.ReduceLROnPlateau.factor = 0.5
torch.optim.lr_scheduler.ReduceLROnPlateau.patience = 5

add_clip_gradient_handler.clip_value = 1e-2

build_model_optimizer_scheduler.optimizer_class = \
    @torch.optim.Adam
build_model_optimizer_scheduler.scheduler_class = \
    @torch.optim.lr_scheduler.ReduceLROnPlateau
build_model_optimizer_scheduler.model_config = \
    @nussl.ml.networks.builders.build_open_unmix_like()

# Building up train arguments
# ===========================
train.output_folder = @output_folder()
train.loss_dictionary = {
    'DeepClusteringLoss': {'weight': .025},
    'PermutationInvariantLoss': {
        'args': ['L1Loss'],
        'weight': .975,
    }
}
train.device = "cuda"
train.num_epochs = 100
train.num_data_workers = 1
train.batch_size = 25
train.seed = 0

# Building up evaluation arguments
# ================================
evaluate.output_folder = @output_folder()

nussl.separation.deep.DeepMaskEstimation.model_path = @model_path()
evaluate.separation_algorithm = @nussl.separation.deep.DeepMaskEstimation
evaluate.block_on_gpu = True
evaluate.num_workers = 1
evaluate.seed = 0

# Building up analysis arguments
# ==============================
analyze.output_folder = @output_folder()
